# 切片的运用实例

'''
    切片操作基本表达式：object[start_index:end_index:step]

    step:正负均可，绝对值大小决定步长，正负决定方向，
    省略默认为1

    start_index:表示起始的索引，省略默认以端点开始取值，
    是从左边开始取还是右边开始取又步长的正负决定

    end_index:表示终止的索引，省略默认以端点为结束，
    一样以步长正负决定，跟start_index的方向相反
'''

str = [0,1,2,3,4,5,6,7,8,9]

# 数字是正数，从0开始左到右开始寻找
# 数字是负数，从-1开始从右到左开始寻找
print("取单个元素：",str[0],str[-1])

print("取一整个对象：",str[:],str[::])
print("反过来取一整个对象：",str[::-1])

print("取中间某一段：",str[1:5],str[2:7])
# 注意这里 如果按照str[1:6:-1]的形式会返回空对象，这意思是指
# 当步长为负的时候，决定了是从右往左的形式取值
# 此时start会按照从右往左边取，而end会按照从左往右取，start无法找到一个end点，于是返回空序列
print("反过来取中间某一段",str[6:1:-1])

# 从左往右边数
# 从右边数起的第六数字到从右边数起的第一个数字
print("索引为负的情况：",str[-6:-1])

# 按从右向左数
# 从右边数起来的第一个数
# 到从右边数起的第6个数
print("所有参数均为负数：",str[-1:-6:-1])

print("索引一正一负：",str[-6:9],str[4:-1])
print("索引一正一负混合相反步长",str[8:-7:-1],str[-2:3:-1])

str2 = str[1:8]
# 这里可以看出下面的[2:-4]是不包括-4元素的
print("多层切片：",str[1:8][2:-4],"第一层：",str[1:8],"第二层：",str2[2:-4])

print("切片的三个参数可以用表达式：",str[2+1:3*2:7%3])